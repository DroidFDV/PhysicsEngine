#ifndef ISHELL_H
#define ISHELL_H


#include "../rigidbody/RigidBody.h"


////////////////////////////////////////////////////////////
/// \brief Abstract class for every shell to provide an
///        interface
///
////////////////////////////////////////////////////////////
class IShell {
public:
    
    ////////////////////////////////////////////////////////////
    /// \brief Connect with RigidBody::shape_traits::type to 
    ///        shell type detection
    ////////////////////////////////////////////////////////////
    using body_shape_type = RigidBody::shape_traits::type;
   
    ////////////////////////////////////////////////////////////
    /// \brief Construct shell by rigid body
    /// \param body rigid body to emplace it in shell
    ////////////////////////////////////////////////////////////
    IShell (RigidBody* body) noexcept : Mybody(body) {}
    
    ////////////////////////////////////////////////////////////
    /// \brief Destructor
    /// \warning Pure virtual function, must be explicitly 
    ///          define in any derived class
    ////////////////////////////////////////////////////////////
    virtual ~IShell() = 0;
    
    ////////////////////////////////////////////////////////////
    /// \brief Get position of inner rigid body
    ////////////////////////////////////////////////////////////
    const _st::Point& getPosition() const noexcept {
        return Mybody->Position;
    }

    ////////////////////////////////////////////////////////////
    /// \brief Get rotation of inner rigid body
    ////////////////////////////////////////////////////////////
    float getRotation() const noexcept {
        return Mybody->Rotation;
    }

    ////////////////////////////////////////////////////////////
    /// \brief Get velocity of inner rigid body
    ////////////////////////////////////////////////////////////
    const _st::Gvector& getVelocity() const noexcept {
        return Mybody->Velocity;
    } 

    ////////////////////////////////////////////////////////////
    /// \brief Get angular velocity of inner rigid body
    ////////////////////////////////////////////////////////////
    float getAngularVelocity() const noexcept {
        return Mybody->AngularVelocity;
    }
    
    ////////////////////////////////////////////////////////////
    /// \brief Get size of inner rigid body
    ////////////////////////////////////////////////////////////
    const _st::Gvector& getSize() const noexcept {
        return Mybody->Size;
    }  
    
    ////////////////////////////////////////////////////////////
    /// \brief Get mass of inner rigid body
    ////////////////////////////////////////////////////////////
    float getMass() const noexcept {
        return Mybody->Mass;
    }
    
    ////////////////////////////////////////////////////////////
    /// \brief Get inverted mass of inner rigid body
    ////////////////////////////////////////////////////////////
    float getInvMass() const noexcept {
        return Mybody->InvMass;
    }
    
    ////////////////////////////////////////////////////////////
    /// \brief Get inertian tensor of inner rigid body
    ////////////////////////////////////////////////////////////
    float getInertiaTensor() const noexcept {
        return Mybody->InertiaTensor;
    }

    ////////////////////////////////////////////////////////////
    /// \brief Get inverted inertia tensor of inner rigid body
    ////////////////////////////////////////////////////////////
    float getInvI() const noexcept {
        return Mybody->InvI;
    }

    ////////////////////////////////////////////////////////////
    /// \brief Get friction of inner rigid body
    ////////////////////////////////////////////////////////////
    float getFriction() const noexcept {
        return Mybody->Friction;
    }
    
    ////////////////////////////////////////////////////////////
    /// \brief Get accumulated force of inner rigid body
    ////////////////////////////////////////////////////////////
    const _st::Gvector& getForce() const noexcept {
        return Mybody->Force;
    }
    
    ////////////////////////////////////////////////////////////
    /// \brief Get torque of inner rigid body
    ////////////////////////////////////////////////////////////
    float getTorque() const noexcept {
        return Mybody->Torque;
    }


    
    ////////////////////////////////////////////////////////////
    /// Member data
    ////////////////////////////////////////////////////////////
public:
    RigidBody* Mybody;
};


#endif // ISHELL_H
