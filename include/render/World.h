#ifndef WORLD_H
#define WORLD_H


#include <vector>
#include <map>
#include "../Math.hpp"
#include "../rigidbody/Manager.h"


struct RigidBody;


////////////////////////////////////////////////////////////
/// \brief Struct which contain all bodies and their shells
///
////////////////////////////////////////////////////////////
struct World {

    ////////////////////////////////////////////////////////////
    /// \brief Construct World with gravity and amount of iterations
    ///
    ////////////////////////////////////////////////////////////
    World (_st::Gvector gravity, int iterations) noexcept :
        WorldGravity(gravity),
        Iterations(iterations)
    {}
   
    ////////////////////////////////////////////////////////////
    /// \brief Function to add an body with shell in world
    ///
    /// \return Added shell if insertion was successful
    ////////////////////////////////////////////////////////////
    IShell* addObject (IShell* object);

    ////////////////////////////////////////////////////////////
    /// \brief Function to remove all bodies and shells from world
    ///
    ////////////////////////////////////////////////////////////
    void clear();

    ////////////////////////////////////////////////////////////
    /// \brief Function to compute step after a special time
    ///
    ////////////////////////////////////////////////////////////
    void step (float dt);

    ////////////////////////////////////////////////////////////
    /// \brief Function to find all collisions between objects
    ///
    ////////////////////////////////////////////////////////////
    void broadPhase();
   

    
    ////////////////////////////////////////////////////////////
    /// Member data
    ////////////////////////////////////////////////////////////
    std::vector<IShell*> vecObjects;
    std::map<ManagerKey, Manager> mapManagers;
    _st::Gvector WorldGravity;

    int          Iterations;
    static bool  accImpulses;
    static bool  warmStarting;
    static bool  posCorrection;
};


#endif // WORLD_H
